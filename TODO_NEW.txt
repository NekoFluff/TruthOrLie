
----- COUNTERING SYBIL ATTACKS
- DONE: Getting an oracle (I use provable)
  - DONE: Step 1: Find a good oracle
  - DONE: Step 2: Retrieve random number from oracle
  - DONE: Step 3: Hash
  - DONE: Step 4: modulo by total number of topics
  - DONE: **UI**: Display 10 topics

- DONE: Random topic assignment
  - DONE: **IMPORTANT** #2: Need to differentiate between finished and ongoing topics (store in different arrays in solidity)
    - DONE: Modify code to remove topic (based on index) when the topic ends [TopicFactory]
    - DONE: Modify code to add topic to the end of finished array [TopicFactory]
  - DONE: Get length of unfinished [TopicFactory]
  - **IMPORTANT #1 (prevent cascade effect)** Store random 10 visible articles in reputation contract [TopicFactory]


- DONE: **UI** Refresh button ~~(every hour)~~ [Reputation] (Require 0.005 ether investment)
  - IGNORE: Test store data (SSS)
  - IGNORE: Store last refresh button in database
  - IGNORE: Refresh every hour

- **UI** Claiming
  - Press button after period ends and get money 
  - DONE: - CREATOR CLAIM ** IMPORTANT 3 ** implement claiming for 0 voters
  - DONE: - ** IMPORTANT 4 ** implement claiming for even voters

- Both of these are on the same page
- **UI** Meter to display current reputation [Topic]
- DONE: **IMPORTANT 5** Number for money pool $$$ [Topic]
- **UI** MONEY POOL

**UI**: Sort arguments by vote count, reputation, creation date (GOING TO NEED DATA RETURN)
---------------------------------------------------------------------------------------------------------------

Other Stuff

DONE: **UI** How it works page
DONE: **UI** Start Here page
**UI** Contribute page

---------------------------------------------------------------------------------------------------------------

DONE: First finish important parts (contract-specific)
Then work on UI implementation
After everything on this list is done, go on linkedIn and twitter. Advertise like crazy. HOPE FOR THE BEST

---------------------------------------------------------------------------------------------------------------

1. DONE: Claiming
  - DONE: indicator to notify the user that it has been claimed
  - DONE: how much ether can be claimed

2. DONE: Reputation Amount
  - DONE: How much reputation you have overall (top left)... Current Reputation for user

3. DONE: Topic Visuals (Pie charts and numbers)
  - DONE: reputations for each topic
  - DONE: votes for each topic
  - DONE: ether pool for each topic
  - DONE: ether pool when viewing available topics
  
4. DONE: Privacy Policy (generator)

5. Google Analytics

6. Advertising on Twitter

7. Icon 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Disclaimer/Advertisement:
As a work in progress, there are plans for some major changes to the mechanisms. 
Become a part of the process and make your voice heard.
Participate in this new crowdsourcing platform, make a little dough, and bring to light the truth.

Advertisement:
Come join us in a new crowdsourcing platform powered by a blockchain incentivization system. 
Your fact checks may be rewarded in the form of ether. 
As an application in Alpha, we are currently only working on the Rinkeby network, but you can be part of the development process.
Make your voice heard and determine the truth for yourself. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Final Twitter Announcement:

Your fact checks may be rewarded in the form of ether!

http://truthorlie.info 

Come join us in a new crowdsourcing platform powered by a blockchain incentivization system (currently in Alpha/Rinkeby testnet). 

Make your voice heard and determine the truth for yourself.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

------ **IMPORTANT #LAST** HIDE VOTES (A two phase system) (MAYBE TEST AND SEE IF IT'S NECESSARY)
- Digital commitment (hash value + random string)
  ---------------------------- Test store data in database (SSS)
  ---------------------------- Store symmetric key
  ---------------------------- Publish keys after voting period ends
  - Store hash per user [Topic]
  - Store hash [local storage]
  - Remind user to 

------ PHASE 2
  - BEFORE CLAIM
  - Provide vote + string (or just provide string)




