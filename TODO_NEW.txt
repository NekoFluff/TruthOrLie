
----- SYBIL ATTACKS
- Getting an oracle (I use provable)
  - DONE: Step 1: Find a good oracle
  - DONE: Step 2: Retrieve random number from oracle
  - DONE: Step 3: Hash
  - DONE: Step 4: modulo by total number of topics
  - DONE: **UI**: Display 10 topics

- DONE: Random topic assignment
  - DONE: **IMPORTANT** #2: Need to differentiate between finished and ongoing topics (store in different arrays in solidity)
    - DONE: Modify code to remove topic (based on index) when the topic ends [TopicFactory]
    - DONE: Modify code to add topic to the end of finished array [TopicFactory]
  - DONE: Get length of unfinished [TopicFactory]
  - **IMPORTANT #1 (prevent cascade effect)** Store random 10 visible articles in reputation contract [TopicFactory]


- DONE: **UI** Refresh button ~~(every hour)~~ [Reputation] (Require 0.005 ether investment)
  - IGNORE: Test store data (SSS)
  - IGNORE: Store last refresh button in database
  - IGNORE: Refresh every hour

- **UI** Claiming
  - press button after period ends and get money 
  - DONE: - CREATOR CLAIM ** IMPORTANT 3 ** implement claiming for 0 voters
  - DONE: - ** IMPORTANT 4 ** implement claiming for even voters

- Both of these are on the same page
- **UI** Meter to display current reputation [Topic]
- DONE: **IMPORTANT 5** Number for money pool $$$ [Topic]
- **UI** MONEY POOL

**UI**: Sort arguments by vote count, reputation, creation date (GOING TO NEED DATA RETURN)


DONE: **UI** How it works page
DONE: **UI** Start Here page
**UI** Contribute page

First finish important parts (contract-specific)
Then work on UI implementation
After everything on this list is done, go on linkedIn and twitter. Advertise like crazy. HOPE FOR THE BEST


TODO:
indicator to notify the user that it has been claimed
how much ether can be claimed
how much reputation you have overall (top left)... Current Reputation for user


reputations for each topic
votes for each topic
ether pool for each topic



------ **IMPORTANT #LAST** HIDE VOTES (A two phase system) (MAYBE TEST AND SEE IF IT'S NECESSARY)
- Digital commitment (hash value + random string)
  ---------------------------- Test store data in database (SSS)
  ---------------------------- Store symmetric key
  ---------------------------- Publish keys after voting period ends
  - Store hash per user [Topic]
  - Store hash [local storage]
  - Remind user to 

------ PHASE 2
  - BEFORE CLAIM
  - Provide vote + string (or just provide string)




